#!/bin/bash

# git2ami - Create a new AMI from a git repository.
# Copyright (c) 2014 b-datum - Thiago Rondon <thiago@b-datum.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# TODO
# - Check if user has permission on sudo to PACKAGER

CONFIGFILE=$1

error_exit () {
        echo "*** ERROR: $1"
        exit 1
}

[ -z $CONFIGFILE ] && error_exit "Use $0 <configfile>"
[ ! -r $CONFIGFILE ] && error_exit "Use $0 <configfile>"

source $CONFIGFILE

[ -z $AWS_SECRET_KEY ] && error_exit "You need to set AWS_SECRET_KEY"
[ -z $AWS_ACCESS_KEY ] && error_exit "You need to set AWS_ACCESS_KEY"
[ -z $FROM ] && error_exit "We need a AMI to build the new image"
[ -z $KEY_PAIR ] && error_exit "We need a KEY_PAIR to build the new image"
[ -z $INSTANCE_TYPE ] && error_exit "We need a INSTANCE_TYPE to build the new image"
[ -z $REGION ] && error_exit "We need a REGION to build the new image"

[ ! -r $PEM ] && error_exit "Where is $PEM ?"
[ ! -r $RUN ] && error_exit "We need a script to deploy"

export AWS_DEFAULT_REGION=$REGION

for CMD_NEED in git scp ssh ec2-run-instances ec2-describe-instances ec2kill ec2stop ec2-create-image aws; do
	if ! which $CMD_NEED 2>&1 >/dev/null; then
		echo "*** We need $CMD_NEED command"
		exit 1
	fi
done

if ! aws ec2 describe-security-groups --region $REGION --group-name $SECURITY_GROUP 2>&1 > /dev/null; then 
	echo "*** The security group '$SECURITY_GROUP' does not exist"
	exit 1
fi

if ! aws ec2 describe-security-groups --region $REGION --group-name default | grep ToPort | grep " $SSH_PORT," >/dev/null; then 
	echo "*** Please open $SSH_PORT for git2ami"
	exit 1
fi

NEW_EC2=`ec2-run-instances $FROM \
	-k $KEY_PAIR \
	--instance-type $INSTANCE_TYPE \
	--region $REGION \
	-g $SECURITY_GROUP \
	$EXTRA_EC2_RUN_INSTANCES \
		| grep ^INSTANCE | awk '{ print $2 }'`

[ $GIT2AMI_DEBUG ] && echo "- Create instance $NEW_EC2"

sleep 2

CHECK_EC2=`ec2-describe-instances \
	--region $REGION $NEW_EC2 \
		| grep ^INSTANCE | awk '{ print $6 }' | grep pending | wc -l`


until [[ ${CHECK_EC2} = "0" ]]; do
	sleep 15
	[ $GIT2AMI_DEBUG ] && echo "- Check if instance $NEW_EC2 is running."
	CHECK_EC2=`ec2-describe-instances \
	--region $REGION $NEW_EC2 \
		| grep ^INSTANCE | awk '{ print $6 }' | grep pending | wc -l`
	sleep 15
done

IP_EC2=`ec2-describe-instances --region $REGION $NEW_EC2 \
	| grep ^INSTANCE | awk '{ print $4 }'`

[ $GIT2AMI_DEBUG ] && echo "- Get IP address ... $IP_EC2"

IP_ADDRESS=$SSH_USER@$IP_EC2

[ $GIT2AMI_DEBUG ] && echo "- Deploy git repository..."

# Copy deploy script
scp -P $SSH_PORT -q -i $PEM -o 'StrictHostKeyChecking=no' $RUN $IP_ADDRESS:

ssh_run () {
	[ $GIT2AMI_DEBUG ] && echo "- Run $@"
	ssh -p $SSH_PORT -q -i $PEM $IP_ADDRESS "$@"
}

# Install packages
ssh_run sudo $PACKAGER update
ssh_run sudo $PACKAGER install -y $PACKAGES

# Run script deploy
ssh_run chmod +x ./`basename ${RUN}`

if [ $GIT2AMI_DEBUG ]
then
	ssh_run ./`basename ${RUN}`
else
	ssh_run ./`basename ${RUN}` 2>&1 >/dev/null
fi


[ $GIT2AMI_DEBUG ] && echo "- Stop instance $NEW_EC2"
ec2stop --region $REGION $NEW_EC2 > /dev/null

CHECK_EC2=`ec2-describe-instances \
	--region $REGION $NEW_EC2 \
		| grep ^INSTANCE | awk '{ print $6 }' | grep stopping | wc -l`

until [[ ${CHECK_EC2} = "0" ]]; do
	sleep 15
	[ $GIT2AMI_DEBUG ] && echo "- Check if instance $NEW_EC2 is running."
	CHECK_EC2=`ec2-describe-instances \
	--region $REGION $NEW_EC2 \
		| grep ^INSTANCE | awk '{ print $6 }' | grep stopping | wc -l`
	sleep 15
done

CURDATE=`date +%d%m%Y-%H%M%S`
NEWAMI=`ec2-create-image $NEW_EC2 \
     --name "$PREFIX_AMI-$CURDATE" \
     --region $REGION \
     	| awk '{ print $2 }'`

[ $GIT2AMI_DEBUG ] && echo "- New AMI is $NEWAMI"

[ $GIT2AMI_DEBUG ] && echo "- Terminate instance $NEW_EC2"
ec2kill --region $REGION $NEW_EC2 > /dev/null

[ -z $GIT2AMI_DEBUG ] && echo $NEWAMI


